const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CompressionWebpackPlugin = require('compression-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;
const { GenerateSW } = require('workbox-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[chunkhash].js', // Use chunkhash without name for the output filename
    clean: true, // Clean the output directory before emit
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: 'babel-loader',
      },
      {
        test: /\.(png|jpg|jpeg|svg|gif)$/,
        type: 'asset/resource',
        generator: {
          filename: 'images/[hash][ext][query]',
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  optimization: {
    splitChunks: {
      chunks: 'all',
      cacheGroups: {
        npmVendor: {
          test: /[\\/]node_modules[\\/]/,
          name(module) {
            const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];
            return `npm.${packageName.replace('@', '')}`;
          },
          chunks: 'all',
        },
      },
    },
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
	   scriptLoading: 'defer',
      hash: true,
    }),
    new WebpackPwaManifest({
      name: 'My App',
      short_name: 'App',
      description: 'My Awesome App!',
      background_color: '#ffffff',
      crossorigin: 'use-credentials',
      icons: [
        {
          src: path.resolve('src/assets/icon.png'),
          sizes: [96, 128, 192, 256, 384, 512],
        },
      ],
    }),
    new CopyWebpackPlugin({
      patterns: [{ from: 'src/static', to: 'static' }],
    }),
    new CompressionWebpackPlugin({
      filename: '[path][base].gz',
      algorithm: 'gzip',
      test: /\.(js|css|html)$/,
      threshold: 10240,
      minRatio: 0.8,
    }),
    new ModuleFederationPlugin({
      name: 'app',
      filename: 'remoteEntry.js',
      remotes: {
        otherApp: 'otherApp@/remoteEntry.js',
      },
      exposes: {
        './MyComponent': './src/MyComponent',
      },
      shared: require('./package.json').dependencies,
    }),
    new GenerateSW({
      swDest: 'service-worker.js',
      clientsClaim: true,
      skipWaiting: true,
      cleanupOutdatedCaches: true,
      exclude: [/\.map$/, /manifest$/, /\.htaccess$/, /api\//],
      runtimeCaching: [
        {
          // Cache for JavaScript chunk files with CacheFirst strategy
          urlPattern: /\.(?:js)$/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'js-chunks-cache-v1', // Versioned cache name
            expiration: {
              maxEntries: 100,
              maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            },
            cacheableResponse: {
              statuses: [0, 200], // Cache responses with these HTTP statuses
            },
          },
        },
        {
          // Cache for image files with CacheFirst strategy
          urlPattern: /\.(?:png|jpg|jpeg|svg|gif)$/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'image-cache-v1', // Versioned cache name
            expiration: {
              maxEntries: 100,
              maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            },
            cacheableResponse: {
              statuses: [0, 200], // Cache responses with these HTTP statuses
            },
          },
        },
        {
          // Cache for CSS files with CacheFirst strategy
          urlPattern: /\.css$/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'css-cache-v1', // Versioned cache name
            expiration: {
              maxEntries: 100,
              maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            },
            cacheableResponse: {
              statuses: [0, 200], // Cache responses with these HTTP statuses
            },
          },
        },
        {
          // Dynamic API fetching based on the application
          urlPattern: ({ url }) => {
            // Custom logic to dynamically match API requests
            // For example, match all URLs containing '/api/' or any other dynamic logic
            return url.pathname.includes('/api/');
          },
          handler: 'NetworkOnly', // Always fetch from network and do not cache
        },
      ],
    }),
  ],
};
