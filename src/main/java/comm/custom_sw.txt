// src/custom-sw.js

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Precache files (this will be automatically generated during build)
precacheAndRoute(self.__WB_MANIFEST, {
  // This helps to remove outdated caches when deploying new versions
  cleanupOutdatedCaches: true,
});

// Cache images with a CacheFirst strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Cache up to 50 images
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days
      }),
    ],
  })
);

// Cache JavaScript and CSS files with a CacheFirst strategy
registerRoute(
  ({ request }) => request.destination === 'script' || request.destination === 'style',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100, // Cache up to 100 static files
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200], // Cache only if the response is OK or is opaque
      }),
    ],
  })
);

// Security: do not cache API requests
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'), // Customize based on your API path
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10, // Fallback to cache if the network request fails within 10 seconds
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200], // Cache only if the response is OK or is opaque
      }),
    ],
  }),
  'GET'
);

// Clean up outdated caches during service worker activation
self.addEventListener('activate', (event) => {
  const cacheAllowlist = ['images-cache', 'static-resources'];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheAllowlist.includes(cacheName)) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
